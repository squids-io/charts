---
# define configmap for db.conf
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-conf
  namespace: {{.Release.Namespace}}
data:
  config.yaml: |
    server:
      httpPort: 8080
      grpcPort: 8081
      runMode: {{if .Values.verTag}}debug{{else}}release{{end}}
      profile: saas
    app:
      clientFilePath: {{.Values.clientFilePath }}
      defaultProjectId: {{.Values.app.defProjId }}
      passwordKey: {{.Values.app.passwordKey }}
      deleteBackupCron: '0 */1 * * *'
      merge:
        agentOfflineSeconds: 300
        taskCron: '0 0 0 * * ? '
        taskTypeRams:
          MySQL: 2
          Oracle: 4
        maxInstance: 64
        maxInstancePerRegion: 32
        vendorInstanceSettings:
          huawei:
            vhostTypes: c3.large.4,c3.xlarge.2,c6.large.4,c6.xlarge.2,c6s.xlarge.2,s2.large.4,s2.xlarge.2,s3.large.4,s3.xlarge.2,s6.large.4,s6.xlarge.2
            sysDiskTypeId: 32
            imageName: oracle19c
            imageRegions: cn-north-4,cn-east-3,cn-south-1
      sandbox:
        oracle:
          availableRegions:
            huawei: cn-north-4,cn-east-3,cn-south-1
          restoreImages:
            '19.3.0.0.0-ee': swr.cn-east-2.myhuaweicloud.com/squids/sq-restorer:{{.Values.images.oracle19cRestorer.tag}}{{.Values.verTag}}
          databaseImages:
            '19.3.0.0.0-ee': swr.cn-east-2.myhuaweicloud.com/squids/qfom-docker:{{.Values.images.oracle19cDatabase.tag}}{{.Values.verTag}}
        mysql:
          availableRegions:
            huawei: all
          restoreImages:
            '5.6': swr.cn-east-2.myhuaweicloud.com/squids/mysql-backup-5.6:v0.0.1
            '5.7': swr.cn-east-2.myhuaweicloud.com/squids/mysql-backup-5.7:v0.0.1
            '8.0.19': swr.cn-east-2.myhuaweicloud.com/squids/mysql-backup-8.0:v0.0.1
            '8.0.31': swr.cn-east-2.myhuaweicloud.com/squids/mysql-backup-8.0.31:v0.0.1
      squids:
        enable: true
        baseUrl: {{ .Values.squids.webApi.baseUrl }}
        appId: {{.Values.squids.appId }}
        appSecret: {{.Values.squids.appSecret }}
        credentialKey: {{.Values.squids.credentialKey }}
        tokenKey: {{.Values.squids.tokenKey }}
      logger:
        level: info
        format: json

    database:
      username: {{.Values.metaDb.user}}
      password: {{.Values.metaDb.pwd | quote}}
      host: {{ .Values.metaDb.host }}
      port: 3306
      database: {{.Values.metaDb.name}}
      debug: {{if .Values.verTag}}true{{else}}false{{end}}
      migrateScriptDir: migrations
---
# define service for apiserver
apiVersion: v1
kind: Service
metadata:
  name: dbs-api-server
  namespace: {{.Release.Namespace}}
spec:
  type: NodePort
  selector:
    app: apiserver
  ports:
  - name: http
    port: 8080
    nodePort: 30080
    targetPort: 8080
    nodePort: {{.Values.apiServer.webPort}}
  - name: grpc
    port: 8081
    nodePort: 30081
    targetPort: 8081
    nodePort: {{.Values.apiServer.grpcPort}}
---
# define deployment for apiserver
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dbs-api-server
  namespace: {{.Release.Namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiserver
  template:
    metadata:
      labels:
        app: apiserver
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - args:
        - -config
        - /woqutech/conf/config.yaml
        - -operation-log-endpoint
        - {{.Values.squids.webApi.baseUrl}}
        - -jwt-secret
        - squids_secret_xz98fj9r1wq
        command:
        - ./apiserver
        image: {{.Values.images.dbsApiServer.registry}}/{{.Values.images.dbsApiServer.repository}}/{{.Values.images.dbsApiServer.name}}:{{.Values.images.dbsApiServer.tag}}{{.Values.verTag}}
        imagePullPolicy: Always
        name: apiserver
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /woqutech/conf/
          name: api-server-conf
        - mountPath: /etc/localtime
          name: localtime
        - mountPath: /etc/ssl
          name: ssl
        - mountPath: /var/woqutech/dbs/install_files
          name: install-files
      volumes:
      - configMap:
          defaultMode: 420
          name: api-server-conf
        name: api-server-conf
      - hostPath:
          path: /etc/localtime
          type: ""
        name: localtime
      - hostPath:
          path: /etc/ssl
          type: ""
        name: ssl
      - hostPath:
          path: /var/woqutech/dbs/install_files
          type: ""
        name: install-files
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: dbs-client-files
            topologyKey: kubernetes.io/hostname
      {{- with .Values.affinity }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}      
