apiVersion: v1
data:
  dashboards.yaml: |-
    # # config file version
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      folderUid: ''
      type: file
      options:
        path: /var/lib/grafana/dashboards

  datasources.yaml: |-
    # # config file version
    apiVersion: 1
    # # list of datasources to insert/update depending
    # # on what's available in the database
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://thanos-query.{{.Release.Namespace}}.svc.cluster.local:{{ .Values.monitorPort }}
      # <bool> enable/disable basic auth
      basicAuth: false
      # <bool> enable/disable with credentials headers
      withCredentials: false
      # <bool> mark as default datasource. Max one per org
      isDefault: true
      version: 2
      # <bool> allow users to edit datasources from the UI.
      editable: true
    {{ if .Values.loki.enabled }}
    - name: Loki
      type: loki
      access: proxy
      url: http://loki-headless.{{.Release.Namespace}}.svc.cluster.local:{{ .Values.loki.port }}
      version: 1
    {{ end }}

kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: {{.Release.Namespace}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{.Release.Namespace}}
  labels:
    app.kubernetes.io/name: grafana
spec:
  replicas: {{ .Values.replicasCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      annotations:
        grafana-version: '1.0'
      name: grafana
      labels:
        app.kubernetes.io/name: grafana
    spec:
      containers:
        - name: grafana
          image: {{ .Values.global.registry }}/{{.Values.global.repository}}/grafana:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.adminPassword }}
          ports:
            - name: grafana
              containerPort: 3000
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
              subPath: dashboards.yaml
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards/
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            {{ if .Values.enableHttps }}
            - name: grafana-secret
              mountPath: /grafana/ssl/
            {{- end }}
            - name: localtime
              mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning
        - name: grafana-config
          configMap:
            name: grafana-config
        {{ if .Values.enableHttps }}
        - name: grafana-secret
          secret:
            secretName: grafana-secret
        {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{.Release.Namespace}}
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    app.kubernetes.io/name: grafana
spec:
  selector:
    app.kubernetes.io/name: grafana
  ports:
    - name: grafana
      protocol: TCP
      port: 3000
      nodePort: {{ .Values.nodePort }}
  type: NodePort